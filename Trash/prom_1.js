function race(iterable) {
    return new Promise ((resolve, reject) => {
        for(const p of iterable) {
            Promise.resolve(p).then(resolve, reject);
        }
    })
}
// –º–µ—Ç–æ–¥ filter () –Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∏–∑–º–µ–Ω—è–µ—Ç –Ω–µ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ  –º–∞—Å—Å–∏–≤ –∫–æ—Ç–æ—Ä—ã–π –µ–º—É –ø–µ—Ä–µ–¥–∞–ª–∏
// —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ Promise.resolve()  –∏–ª–∏ Array.isArray(),
const arr = new Array();
arr.push(1)
arr.push(2)

Number.isNaN()

/// https://developer.mozilla.org/en-US/docs/Glossary/Static_method
/// https://www.techopedia.com/definition/24034/static-method-java



456.576846.toFixed(2)

Array.from("qwerty"); // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∏–¥–µ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º Array

Array.isArray(123) // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∏–¥–µ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º Array
// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ - –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–∞—á–∏—Å–∞–µ—Ç–Ω–∞—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ –ø–æ –∏–º–µ–Ω–∏ –ö–ª–∞—Å—Å–∞ –∏ —Ç–æ—á–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç –∏–º—è –º–µ—Ç–æ–¥–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä: Array.isArray() , —Ç–æ —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥. 


// –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫ ? 
// function race(iterable) {
//     for(const p of iterable) {
//         return Promise.resolve(p);
//     }
// }






const rand = () => Math.random() * 2000;

const p1 = new Promise(r => setTimeout(r, rand(), "üçé"));
const p2 = new Promise(r => setTimeout(r, rand(), "üçã"));
const p3 = new Promise(r => setTimeout(r, rand(), "üçâ"));
// const p4 = new Promise(r => setTimeout(r, rand(), "D"));

// race([p1, p2, p3, p4]).then(
//     value => console.log("1 >>>", value),
//     reason => console.log("2 >>>", reason),
// );


// simple-all
function all(iterable) {
    const arr = [];
    let count = 0
    
    const prom = new Promise((resolve) => {
        if(iterable.length === 0) {
                resolve(arr)
            }
        for(let i = 0; i < iterable.length; i += 1) {
            iterable[i].then(function(item) { // –ø–æ—á–µ–º—É —à–µ—É—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ? 
                console.log(item);

                arr[i] = item  //
                
                count += 1
                if(count === iterable.length){
                    resolve(arr)
                }
            })
        }

        // –∫–æ–≥–¥–∞ –≤—Å–µ p –∑–∞–≤–µ—Ä—à–∞—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, —Ç–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –¥–æ —ç—Ç–æ–≥–æ —Ä–∞–Ω–æ —á—Ç–æ —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
    })
    
    return prom
}

all([p1, p2, p3]).then(arr => {
    console.log("???????", arr); // arr === ["üçé", "üçã", "üçâ"]
  });
  



//1) –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ mdn –ø—Ä–æ  Promise.resolve –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç

// const p1 = Promise.resolve({
//     then(onFulfill, onReject) {
//       onFulfill("fulfilled!"); // –ø–æ—á–µ–º—É –∑–¥–µ—Å—å –Ω–µ resolve ?  –ø—Ä–æ—Å—Ç–æ Fulfill –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–∏–ª–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞,  –∞ resolve —á—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ 
//     },
//   });
//   console.log(p1 instanceof Promise); // true, object casted to a Promise
  
//   p1.then(
//     (v) => {
//       console.log(v); // "fulfilled!"
//     },
//     (e) => {
//       // not called
//     },
//   );
  
  //2) 
  const p = new Promise((resolve, reject) => {
    const backEndData = {
        server: 'aws',
        port: 2000,
        status: 'preparing',
    }
    resolve(backEndData); // —ç—Ç–æ—Ç –ø—Ä–æ–º–∏—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç

  })

  p.then(data => { //–∑–¥–µ—Å—å  data —ç—Ç–æ —Ç–æ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤—ã—à–µ –≤ resolve(backEndData);
    const p2 = new Promise ((resolve, reject) => { // 
        data.modifide = true;
        resolve(data);
    })
  })
//–ø–æ—á–µ–º—É –Ω–∏–∂–µ –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç const p2 –∫–æ—Ç–æ—Ä–∞—è –≤—ã—à–µ ? 
//   p2.then(claintData => { // —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –ø–æ—á–µ–º—É —É –º–µ–Ω—è p2 –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ –ø—Ä–æ–º–∏—Å—É –≤—ã—à–µ? —Ö–æ—Ç—è –≤ –≤–∏–¥–µ–æ —É –≤–ª–∞–¥–ª–µ–Ω–∞ —Ç–∞–∫–∂–µ, –∏ —É –Ω–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ const p2 –≤—ã—à–µ
//     console.log('data recived', claintData)
//   }) 