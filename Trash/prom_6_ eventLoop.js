//________________________
//Event Loop

function solution() {
    return [
      ['A','B','C','F','D','B','E'], // ‚Üê Task 1
      ['I','G','H','J','L','K'], // ‚Üê Task 2
    ]
  }

//   console.log('A');

// const intervalId = setInterval(() => {
//   console.log('B'); // 1 , 5
// }, 10);

// setTimeout(() => {
//   const promise = new Promise((resolve) => {
//     console.log('C'); // 2
//     resolve('D');
//   }); // fulfilled<D>
// // –≤—Å–µ –∫–æ–ª–±—ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–æ–≤ then() catch() finally() - —ç—Ç–æ –º–∏–∫—Ä–æ –∑–∞–¥–∞—á–∞. –∞ Promise —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∂–µ –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞–∫ –∏ –º–µ—Ç–æ–¥ map –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∞—Å—Å–∏–≤–∞–º–∏. –∏ —ç—Ç–æ –Ω–µ –º–∏–∫—Ä–æ –∏ –Ω–µ –º–∞–∫—Ä–∞ –∑–∞–¥–∞—á–∞.
//   promise.then((value) => {
//     console.log(value); //4 <D>
//     setTimeout(() => {
//       console.log('E'); //6
//       clearInterval(intervalId);
//     }, 10);
//   });

//   console.log('F'); //3
// }, 10);

setTimeout(() => {
    console.log('G'); //2
    Promise.resolve().then(() => console.log('H')); // 3 //–ø–æ–∫–∞ —ç—Ç–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —Å–ª–¥–µ–¥—É—é—â—É—é –º–µ–∫—Ä–æ –∑–∞–¥–∞—á—É –≤–∑—è—Ç—å –Ω–µ–ª—å–∑—è.
  }, 0);
  
  new Promise(function (resolve, reject) {
    console.log('I'); //1
    setTimeout(function () {
      console.log('J'); //4
      resolve('K');
    }, 0);
  }).then((res) => {
    console.log('L'); //5
    setTimeout(() => {
      console.log(res); //6
    }, 0);
  });
  

// function promise ()  {
//  return  new Promise((resolve) => {
//     console.log('Cims');
//     resolve('Dima');
//   }).then(console.log)
// }  


//   function count (s) {
//     let count = 0;
//     for(let i = 0; i < 5; i += 1) {
//         console.log(`${ i} : C`, 'log')
//         count += 1
//     }
//     return count
//   }

//   console.log(count('str'))








//_______________________
//–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Ç—É–∞—Ü–∏–π –≤ –º–µ—Ç–æ–¥–µ then()
// 1) returns a value: p gets fulfilled with the returned value as its value.
const p = Promise.resolve(1) // –≤ –¥–æ–∫–µ –ø—Ä–æ then() –≥–¥–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è 6 –ø–æ–≤–µ–¥–µ–Ω–∏–π then(), —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –ø—Ä–æ –ø—Ä–æ–º–∏—Å –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ then() –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ p.then()
  .then((x) => {
    // –∫–∞–∫ —Ä–∞–∑ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤—Å–µ —ç—Ç–æ 6 –ø–æ–≤–µ–¥–µ–Ω–∏–π –¥–ª—è then()  –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–∏–∏ 'p' –∏–∑ –¥–æ–∫–∏ –æ–Ω–∏ –∏–º–µ–ª–∏–∏ –≤–≤–∏–¥—É const p = Promise.resolve()
    // ...
    throw x + 1
  })

p.then(
    value => console.log({value}), 
    reason => console.log({reason}),
  )



//______________________
  const first = () => new Promise(r => setTimeout(r, 3000, 'first'));
  const second = () => new Promise(r => setTimeout(r, 2000, 'second'));

  first().then(function (val) {
    console.log(val, '!@#')
     second();
  }).then((val) => console.log(val, '¬±¬±¬±'));



  function third() {
    return "third";
  }
  
  first().then(third()) //—Ç–∞–∫ –∫–∞–∫ –∑–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–¥–∞–µ–º third() —Å–æ —Å–∫–æ–±–∫–∞–º–∏, —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è C—Ä–∞–∑—É. –≠—Ç–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ—Ç —Ç–∞–∫; third, –∏ –∫–æ–≥–¥–∞ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è  —Ç–æ–≥–¥–∞ –æ–Ω–∞ –ø–æ–ø–æ–¥–µ—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º onFulfilled —ç—Ç–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π then()

  .then(console.log); // —Ç–∞–∫ –∫–∞–∫ third() —ç—Ç–æ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è, then() –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ª–±—ç–∫ (x) => x, –∞ –≤ X –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–∏—Å–∞ first
  first().then(third).then(console.log); // —Ç–∞–∫ –∫–∞–∫ third —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è  then() –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã  —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–≥–¥–∞ –¥–æ—Ö–æ–¥–∏—Ç –æ—á–µ—Ä–µ–¥—å –¥–æ —ç—Ç–æ–≥–æ then() –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ then() —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º onFulfilled 

first().then(x => x, third()).then(x => console.log(x, 'üëæ'))
first().then(() => third).then((x) => console.log(x, '0'))

//____________________
// 5) returns an already rejected promise: p gets rejected with that promise's value as its value.
//–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 5 –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ then()
  const promiseRej1 = new Promise((res, rej) => {
    rej('prom was rejected');
})

promiseRej1.then(() => {}, (val) => {return val +' 1 TIME' })
.then((val) => {console.log(val)}); // –≤—ã–≤–µ–¥–µ—Ç 'prom was rejected 1 TIME' —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π then –Ω–µ –≤—ã–∫–∏–Ω—É–ª throw